<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shell]]></title>
    <url>%2F2019%2F03%2F17%2F%E8%BD%AC%E7%BD%AE%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[描述力扣上看到这么一道题，假设 file.txt 文件内容如下：name agealice 21ryan 30应当输出：name alice ryanage 21 30嗯。。。怎么搞呢？？这就需要我们对Linux的一些命令有些了解了。这里我们使用awk命令。前置知识awk是啥？awk是一种优良的文本处理工具，它不仅是Linux中也是任何环境中现有的功能最强大的数据处理引擎之一。先来了解一下解决这个问题需要用到的awk里的指令：NF：这个表示的是字段总数；NR：这个表示的是所读文件的当前行数；$0：表示当前行的所有内容，比如print $0可以打印整行内容；$i：表示第i个字段；BEGIN,END：这两个个标识程序开始和结束。开始写！awk的shell格式是awk ‘{XXXX}’ filename，所以我们可以使用这样的命令:awk '&#123; for(i=1;i&lt;=NF;i++)&#123; if(NR==1)&#123; file[i]=$i #这里如果打印file[i],会发现是两行，第一行是name，第二行是age。和其它语言的数组打印格式不同 &#125;else&#123; file[i]=file[i] " " $i #因为输出要求有空格 &#125; &#125;&#125;END&#123; for(i=1;i&lt;=NF;i++)&#123; print file[i] &#125;&#125;' file.txt这里为了好看一些，排了个版，当然我们需要在终端直接输入一整行指令，存成文件也可以，不过估计得改一下文件路径：awk '&#123;for(i=1;i&lt;=NF;i++)&#123;if(NR==1)&#123;file[i]=$i&#125;else&#123;file[i]=file[i]" "$i&#125;&#125;&#125;END&#123;for(i=1;i&lt;=NF;i++) print file[i]&#125;' file.txt为什么这样写？现在来解释一下。我们知道file.txt有三行，每行两个字段，所以NF=2；如果文件只有一行，即NR=1的话，直接构造一个数组把字段存进去即可得到转置后的文件（注释里有，自己也可以试着打印一下）。得到NR=1是的file数组输出：nameage接着开始读取下一行，又重新开始循环，i=1，此时NR=2，所以执行else里面的代码，此时会在原有file数组里增加file.txt第二行的字段(file[i]=file[i] “ “ $i)，第一次循环：name aliceage 21至此，第二次循环后执行END结束里的指令，得到我们想要的输出。值得注意的是每次读完一行，都会这一行的开始读取字段,重新循环是一个点。]]></content>
      <categories>
        <category>心得小谈</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序：哔哩哔哩新番时间表]]></title>
    <url>%2F2019%2F03%2F12%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[源起最近由于被人问起，一时间心血来潮想到写一个微信小程序，于是就捣鼓了一个超级简单的小程序：哔哩哔哩新番时间表。开始！我们首先需要在微信公众平台注册一个账号，然后下载它的一个开发工具：微信开发者工具。这个软件在该平台可以下载。接着打开工具，使用微信登陆后，创建一个新项目，点击使用测试号即可。如图：了解小程序结构这里我得感谢一下梁老师，是他强制让我们使用Node.js开发网站，让我对于微信小程序开发有了一定的基础。微信小程序可以用Node.js开发，也能使用php，这里我们当然是用Node.js了，因为选择的测试号，开发工具没有提供php这个选项。好的，我们来看一下我这个小程序的目录结构：好的，这个wxml文件和wxss文件分别对应我们常见的的html和css文件，语法都是一样的。进入主题我们先找到哔哩哔哩的各种API，这里我直接给出我所用到的API：新番时间表：https://bangumi.bilibili.com/web_api/timeline_global番剧详情：https://bangumi.bilibili.com/ext/web_api/season_count?season_id=&#39;+this.data.id+&#39;&amp;season_type=1,这里this.data.id对应番剧的id；推荐番剧：https://api.bilibili.com/pgc/web/recommend/related/recommend?season_id= + this.data.id；当前在线人数及稿件数：http://api.bilibili.com/x/web-interface/online ,这个我调用失败了，我非常确定B站对这个API做了防盗链处理！说一下思路：请求API，分析返回的json，获取数据，传数据给wxml，wxss完成修饰效果，最后由微信完成渲染。app.js这是小程序的入口文件，我们直接调用API，不需要配置它。app.json这里配置小程序的名称，目录，颜色样式等等,代码如下：&#123; "pages": [ "pages/index/index", "pages/detail/detail" ], "window": &#123; "backgroundTextStyle": "dark", "navigationBarBackgroundColor": "#2196f3", "navigationBarTitleText": "哔哩哔哩新番时间表", "navigationBarTextStyle": "white", "enablePullDownRefresh": true &#125;&#125;现在我们来到index文件夹index.js这个文件定义的是主页的监听操作，如下：Page(&#123; data: &#123; setall:[], detail:[] &#125;, /** * 生命周期函数--监听页面加载 */ onLoad: function (options) &#123; &#125;, /** * 生命周期函数--监听页面初次渲染完成 */ onReady: function () &#123; &#125;, /** * 生命周期函数--监听页面显示 */ onShow: function () &#123; this.getstart() &#125;, /** * 生命周期函数--监听页面隐藏 */ onHide: function () &#123; &#125;, /** * 生命周期函数--监听页面卸载 */ onUnload: function () &#123; &#125;, /** * 页面相关事件处理函数--监听用户下拉动作 */ onPullDownRefresh: function () &#123; &#125;, /** * 页面上拉触底事件的处理函数 */ onReachBottom: function () &#123; &#125;, getstart()&#123; wx.request(&#123; url: 'https://bangumi.bilibili.com/web_api/timeline_global', success:(res) =&gt; &#123; this.setData(&#123; setall:res.data.result &#125;) &#125; &#125;) &#125;, /** * 跳转到详情页面 */ goToDetail(e)&#123; wx.navigateTo(&#123; url: '/pages/detail/detail?id='+e.target.dataset.id &#125;) &#125;&#125;)我们需要使用Page({})将整个文件涵盖，wx.request({})是请求一个url，然后会有一个response，我们就从这个response取数据。wx.navigateTo({})是和bindtap跳转结合使用的，在index.wxml中会提到。index.wxml这里就相当于html格式，先给出代码：&lt;!--pages/index/index.wxml--&gt; &lt;view id="stories-list" bindtap="goToDetail"&gt; &lt;block wx:for="&#123;&#123; setall &#125;&#125;" wx:key="item.date_ts"&gt; &lt;view id="time"&gt; &lt;text id="date"&gt;&#123;&#123;item.date&#125;&#125;号更新番剧：&lt;/text&gt; &lt;block wx:for="&#123;&#123;item.seasons&#125;&#125;" wx:key="stories.ep_id" wx:for-item="stories"&gt; &lt;view id="detail" data-id="&#123;&#123;stories.season_id&#125;&#125;"&gt; &lt;text id="&#123;&#123;stories.season_id&#125;&#125;" data-id="&#123;&#123;stories.season_id&#125;&#125;"&gt;&#123;&#123;stories.title&#125;&#125;&#123;&#123;stories.pub_index&#125;&#125;\n更新时间：&#123;&#123;stories.pub_time&#125;&#125;\n追番人数：&#123;&#123;stories.favorites&#125;&#125;人&lt;/text&gt; &lt;image src="&#123;&#123; stories.square_cover &#125;&#125;" data-id="&#123;&#123;stories.season_id&#125;&#125;"&gt;&lt;/image&gt; &lt;/view&gt; &lt;/block&gt; &lt;/view&gt; &lt;/block&gt; &lt;/view&gt;我们在index.js中定义了一个数组：setall，我们使用wx:for=”“来遍历它，这里就相当于标签。wx:key=”item.data_ts”(指定遍历唯一标识)是因为我们可以发现每一个数组中的元素的data_ts都是不同的，所以可以作为唯一标识(key)。这里的data_ts是请求了https://bangumi.bilibili.com/web_api/timeline_global 得到的response里的数据，不是凭空捏造的。这里的item代替了setall，相当于setall变成了item（换了个名字，小程序语法要求）如图：我们在index.js使用了代码：setall:res.data.result /*取得上图中的result赋给setall*/如此，我们就能得到外层数据，因为我们发现这里的response存在双重嵌套（可以自己访问这个API链接详细观察）。这么一来，我们就需要换名了。我们先使用item.seasons这个数组来循环，接着使用wx-for-item=”stories”将循环数组换成stories这个名字，接下来我们就能欢快地使用它得到某一天所有的更新番剧啦！接着由于我们使用了bindtap=”goToDetail”，需要为后端传一个番剧的id，来构造该番剧的链接，使用data-id=”“，便能在我们点击其所属标签域时把id值传回给后端。比如我们这里给img，text加上了data-id,如果只在text加上了data-id，那我们点击图片，就不会把id值传回给后端。我们在goToDetail()函数里使用e.target.dataset.id得到id值。index.wxss这个就相当于css，我这里用了弹性布局，显示效果好一点:/* pages/index/index.wxss */#date&#123; font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;&#125;#detail &#123; display: flex; padding: 20rpx; border-radius: 10rpx; margin: 20rpx 0; background: white; box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);&#125;#detail text &#123; display: block; flex-grow: 1; font-size: 27rpx; margin-right: 30rpx;&#125;#detail image &#123; width: 120rpx; height: 120rpx;&#125;这个我就不多解释了，只要能正确得到数据，效果什么的永远也不慌。但是rpx=0.5px，这个得了解一下。index.json&#123; "usingComponents": &#123;&#125;&#125;这个没什么好说的，基本没用到。现在来到detail文件夹detail.js老办法，首先确定需要的变量，然后方法和index.js基本一样：Page(&#123; data: &#123; id: '', coins:'', danmakus:'', views:'', detail:[] &#125;, onLoad(option) &#123; /*这里获取传过来的id*/ if (option.id || option.query.id) &#123; this.data.id = option.id || option.query.id; &#125; &#125;, onShow() &#123; this.getDetail() &#125;, getDetail() &#123; wx.request(&#123; url: 'https://bangumi.bilibili.com/ext/web_api/season_count?season_id='+this.data.id+'&amp;season_type=1', success: (res) =&gt; &#123; this.setData(&#123; coins: res.data.result.coins, danmakus: res.data.result.danmakus, views: res.data.result.views &#125;), this.getRecommend() &#125; &#125;) &#125;, getRecommend()&#123; wx.request(&#123; url: 'https://api.bilibili.com/pgc/web/recommend/related/recommend?season_id=' + this.data.id, success: (res) =&gt; &#123; this.setData(&#123; detail:res.data.result &#125;) &#125; &#125;) &#125;&#125;)我们得注意一下获取id的方法！index.wxml&lt;!--pages/detail/detail.wxml--&gt;&lt;view id="top"&gt;&lt;!--&lt;text&gt;当前B站最新投稿：&#123;&#123;sub&#125;&#125;件;\n&lt;/text&gt;&lt;text&gt;当前B站在线总人数：&#123;&#123;online&#125;&#125;;\n&lt;/text&gt; API无法访问--&gt;&lt;text&gt;该番剧当前硬币总数：&#123;&#123;coins&#125;&#125;;\n&lt;/text&gt;&lt;text&gt;当前弹幕总数：&#123;&#123;danmakus&#125;&#125;;\n&lt;/text&gt;&lt;text&gt;当前播放总数：&#123;&#123;views&#125;&#125;;\n&lt;/text&gt;&lt;/view&gt;&lt;view id="comicRe"&gt;&lt;text id&gt;为您推荐以下番剧：&lt;/text&gt;&lt;/view&gt;&lt;view id="recommend" wx:for="&#123;&#123;detail&#125;&#125;" wx:key="season_id"&gt;&lt;text id="&#123;&#123;item.season_id&#125;&#125;"&gt;&#123;&#123;item.title&#125;&#125;&#123;&#123;item.new_ep.index_show&#125;&#125;&lt;/text&gt;&lt;image src="&#123;&#123;item.cover&#125;&#125;"&gt;&lt;/image&gt;&lt;/view &gt;有了以上的经验，相信这里的单循环比较简单了。detail.wxss/* pages/detail/detail.wxss */#recommend &#123; display: flex; padding: 20rpx; border-radius: 10rpx; margin: 20rpx 0; background: white; box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);&#125;#recommend text &#123; display: block; flex-grow: 1; font-size: 27rpx; margin-right: 30rpx;&#125;#recommend image &#123; width: 120rpx; height: 120rpx;&#125;#top &#123; display:flex; padding: 20rpx; border-radius: 10rpx; margin: 20rpx 0; background: white; box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);&#125;#top text &#123; display: block; flex-grow: 1; font-size: 27rpx; margin-right: 30rpx;&#125;#comicRe &#123; display:flex; padding: 20rpx; border-radius: 10rpx; margin: 20rpx 0; background: white; box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);&#125;#comicRe text &#123; display: block; flex-grow: 1; font-size: 27rpx; margin-right: 30rpx;&#125;这里一样的布局方式。detail.json和index.json一样，用不上。让我们看一看效果！我们最好使用ipnone6测试小程序，测试效果如下:本来还想加入其它功能的，结果B站的API不公开。全得自己F12找，而且它的数据不是API能够得到的，于是就没办法做了。希望我以后能做出更多更好玩的小程序吧，现在事情还有点多。]]></content>
      <categories>
        <category>杂记</category>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[攻防世界小记]]></title>
    <url>%2F2019%2F03%2F05%2F%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%2F</url>
    <content type="text"><![CDATA[前言这里挑选了一些个人认为有价值的题目，当然，正在不断攻克中，会不断更新的(暂时只更新一个专题)。Miscembarrass这道题是一道流量分析题，首先拿到流量包，发现有点大266MB(太大了，就不放出来了)，估计有点东西，于是首先导出文件，发现有很多杂七杂八的东西，但是看过一遍后貌似没有什么有用的东东(比如压缩包啊啥的)？？嗯？？这么坑的吗？于是想到这种题多半是直接给了flag在字符串里面的，靠N多数据包来混淆我们，让我们难以直接发现,只能瞎找数据包，于是拖到虚拟机，输入命令：strings misc_02.pcapng | grep flagEmmmm，果然不出所料：看一看我们得到的导出文件，毫无L用。。：Reverse-it这道题有点难度，而且极具迷惑性。首先我们拿到题目，是一个二进制文件。先用010看一下，发现是二进制文件，既然“提示”我们要逆向它，那么我们就先用IDA分析一下，然而太菜了，什么都逆不出来。放到虚拟机运行一下试试看？报错！然而，Linux还是有用的，可能这里的逆向不是我们想象中的逆向，这里指的应该是把它反着输出一下？不管了，试试看！于是使用了一下命令：xxd -p Reverseit | tr -d '\n' | rev | xxd -r -p &gt; reversed这里解释一下这些是什么意思：‘|’: 比如a | b的意思是将a的输出作为b的输入；xxd -p filename表示把filename进行十六进制存储；tr -d ‘\n’表示删除换行符；rev表示把字符相反输出；xxd -r -p表示把十六进制转换成二进制；接着&gt; reversed表示将其存储为名称为reversed的文件。还没完，还要使用file命令确定一下reversed的类型：file reversed啊啊啊，看我们得到了什么！一张名为reversed图片！我们把图片内容反着输出就行了！第四FS扩展这道题又是给了一张图片，如下：这里的图片我压缩过了，原图片实在是太大了(12M)，看到这么大的图片肯定不正常，先用binwalk看一下再说，果然有一个压缩包，里面有一个file.txt，提取出来居然无法打开，WinRAR修复后发现里面的文件居然没了?彻底懵逼了，但是不信邪的我拿图片放到Linux下去binwalk了一下，居然发现结果多了一个ext-root文件夹，里面的压缩包居然是好的？？？密码当然就在图片的详细信息里啦，拿到file.txt,按照题目提示，当然得分析词频了，把词频按照脚本提取出来，得到flag。这里上个本题用到的分析词频的脚本。未完待续！]]></content>
      <categories>
        <category>CTF训练</category>
        <category>攻防世界</category>
      </categories>
      <tags>
        <tag>CTF训练</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[腾讯云使用宝塔面板部署Hexo]]></title>
    <url>%2F2019%2F02%2F22%2F%E8%85%BE%E8%AE%AF%E4%BA%91%E9%83%A8%E7%BD%B2Hexo%2F</url>
    <content type="text"><![CDATA[前言在网上找了很多教程，但是基本没有使用宝塔Linux面板部署Hexo的，基本都是从命令行开始直接搞，但是这样并不直观，因此，我摸索出了使用宝塔面板部署Hexo的方法。使用宝塔面板部署，因为它已经帮我们安装好了nginx和git，不必我们自己手动安装。正式开始！配置Git！在这里，我购买完云服务器之后，就立马重装了宝塔Linux面板。为此，我们需要先重装一下系统。首先，进入云服务器控制台，选中一台实例，然后拉到最右边点击更多。如图所示：接着，按照如图所示选择宝塔面板版本，选择上海霹格这一款，貌似是腾讯云专门定制的，当然，选择其它的应该也行。最后，等待其安装完成，成功之后访问：ip:8888，配置好用户名与密码后即可进入你的宝塔面板。然后按照提示安装所需的nginx，等待安装完成即可。接着，我们在home文件夹下新建git，hexo这两个文件夹。随后，我们通过腾讯云或者xshell登录我们的实例，依次执行cd .. //这里是因为默认执行目录是root，需要返回根目录cd homecd gitgit init --bare hexoBlog.git接着，转到宝塔面板，进入/home/git/hexoBlog.git/hooks,然后新建一个文件：post-receive，不要后缀名。然后编辑它，加入如下两条代码：#!/bin/bashgit --work-tree=/home/hexo --git-dir=/home/git/hexoBlog.git checkout -f保存即可，接着转到已经登录的实例控制台，即xshell或者腾讯云控制台执行如下代码：chmod +x /home/git/hexoBlog.git/hooks/post-receive至此，git基本已经配置完成！配置Nginx！宝塔面板默认的nginx配置文件在根目录-&gt;www-&gt;serve-&gt;nginx-&gt;conf下，找到nginx.conf，编辑它，如图：接下来，重启nginx服务：service nginx restart本地Hexo配置找到本地Hexo站点配置文件_config.yml，进行如下更改：deploy: type: git repository: tencent: root@你的云服务器ip:/home/git/hexoBlog #如果你更改了ssh端口的话，需要改成: tencent: ssh://root@ip:端口号/home/git/hexoBlog如果你更改了ssh端口的话，需要大功告成！至此，只要在本地Hexo的git bash下执行：hexo cleanhexo g -d接着可能会提示你输入你的云服务器的密码，此处输入密码不会显示，复制粘贴完后直接回车即可，成功后访问你的域名或者ip就能看到你的Hexo博客了！最快速方法如果不使用以上方法配置nginx的话，可以直接在宝塔面板添加网站，填上域名，更改网站目录为你上传的目录，不必修改nginx主配置，可以避免以后可能的错误。当然，git的hooks那一步(即步骤二)还是需要执行的，这个方法只是不用人工修改nginx配置文件。这里可能出现的问题有：忘记解析域名到ip地址；虽然解析了ip，但是要注意的是有一定的延迟，当初我就是直接选择的这种方法，但是发现访问不了，就自己摸索了第一种办法，但是不久后我发现原来是解析延迟的问题，有点坑。这可以说这是非常快速的方法了。]]></content>
      <categories>
        <category>杂记</category>
        <category>腾讯云</category>
      </categories>
      <tags>
        <tag>杂谈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019HGAMEWP]]></title>
    <url>%2F2019%2F02%2F16%2FHGAMEWP%2F</url>
    <content type="text"><![CDATA[CryptoMix首先拿到的是一串摩斯电码：–…/….-/….-/-…/–…/…–/…../..-./-…./-../-…./..-./–…/—-./….-/….-/–…/.—-/-…./-…/–…/-…/-…./..—/…../.—-/-…./-…./…–/….-/…–/—–/-…./…../–…/-.. ，首先在线解密得到一串意味不明的东西：744B735F6D6F7944716B7B6251663430657D，于是试一下16进制转为text，于是居然得到：tKs_moyDqk{bQf40e}，很显然现在应该凯撒移位，但是不管怎么移，都得不到hgame{这个字段，于是看到题目名字为Mix，想到应该还有其它加密方式，前面发现移位可以得到：hYg_acmRey{pEt40s}，于是想到栅栏密码，在线解密，尝试得在每组字数为9时，得到flag：hgame{E4sY_cRypt0}。Vigener~这道题只给了一串密文：Zbi Namyrwjk wmhzk cw s eknlgv uz ifuxstlata edhnufwlow xwpz vc mkohk s kklmwk uz mflklagnkh Gswyuv uavbijk, huwwv uh xzw ryxlwxm sx s qycogxx. Ml ay u jgjs ij hgrsedhnufwlow wmtynmlmzcsf. Lny gahnyv ak kuwq lu orvwxmxsfj urv asjpwekhx, tmz cx jwycwlwj upd szniehzm xg txyec az zsj lnliw ukhxmjoyw, ozowl wsxhiv az nlw vkmgjavnmgf ry gzalzvw atxiuzozjjshfi. Ests twgvfi zsby xjakx xg asjpwekhx wfilchloir kunyqwk zbel sxy ikkkhxasrfc Namyrwjk wmhzklw. Af kckzlkyr kadnc lzxyi, Xjoyhjaib Oskomoa ogm xzw lcvkl zi tmtrcwz s myrwjgf qwlnih gx jygahnyvafm Pmywtyvw uojlwjy. Nlw Noaifwxy gahnyv osy ivayohedde xikuxcfwv hs Kagbur Tsznmklg Viddgms af ncw gfk nlgmyurv xopi zmtxvwv ghh xalnc-gfk vsgc Ru gaxxu hwd. Yck. Yaupef Tgnxakzu Fwdruwg, tan xzw ywlwek qek dgnij eomellxcfmlkx xg Trumkw jy Zaykhijw oh xzw tcrwln wiflalc sfj ms suwomjwj cxk hxywwfz heew. lfey ay ajqmenycpglmqqjzndhrqwpvhtaniz居然没给密钥，不过山人自有妙计，使用在线解密站点：http://68.168.134.3/vigener 可以实现无密钥解密，最终所得明文结果：The Vigenere ciphe is a method of encrypting alphabetic text by using a series of interwoven Caesar ciphers, based on the letters of a keyword. It is a form of polyalphabetic substitution. The cipher is easy to understand and implement, but it resisted all attempts to break it for three centuries, which earned it the description le chiffre indechiffrable. Many people have tried to implement encryption schemes that are essentially Vigenere ciphers. In eighteen sixty three, Friedrich Kasiski was the first to publish a general method of deciphering Vigenere ciphers. The Vigenere cipher was originally described by Giovan Battista Bellaso in his one thousand five hundred and fifty-one book La cifra del. Sig. Giovan Battista Bellaso, but the scheme was later misattributed to Blaise de Vigenere in the nineth century and so acquired its present name. flag is gfyuytukxariyydfjlplwsxdbzwvqtMiscAre You Familiar with DNS Records根据题目所提，应该需要查询一系列DNS，尝试了许久，复制链接地址;http://project-a11.club/ ,通过在线网站:https://tool.lu/dns/index.html 查询txt，得到flag。Broken Chest下载得到的是一个zip压缩包，打开提示错误，于是使用winhex打开，发现文件头被改了，改回后发现被加密了，于是看了一下发现是真的被加密了，然后使用winrar打开后居然直接给了密码，太良心了，原本以为要CRC爆破的。Hidden Image in LSB下载压缩文件，解压发现居然有一个lsb.py文件，还有一张png图片:原以为要用到py，结果只是使用stegsolve变换通道就出来了。Warmup首先解压下载压缩包，发现是一张打不开的1.gif图片，16进制分析下发现是MDMP文件，于是改为dmp后缀，使用mimikatz（这里直接百度下载一个就是）分析，使用命令：sekurlsa::minidump 1.dmp效果如下:sekurlsa::logonPasswords full发现密码:于是将密码LOSER使用SHA256加密一下得到：dd6dffcd56b77597157ac6c1beb514aa4c59d033098f806d88df89245824d3f5于是flag为：hgame{dd6dffcd56b77597157ac6c1beb514aa4c59d033098f806d88df89245824d3f5}暗藏玄机题目给了两张图片，猜测使用stegsolve结合图片，结果不是，于是猜测为盲水印攻击，bingo！题目所给图片如下：python bwm.py decode 开学啦.png 开学了.png s.png得到s.png，即为flag：hgame{h1de_in_THE_p1Cture}这里给出bwm.py文件：bwm.py需要注意的是使用此脚本需要先安装opencv库。初识二维码首先解压压缩包，看到一个文件flag.txt,查看一下发现是一种加密过的照片格式，使用在线网站base64转图片或者直接复制文件粘贴到浏览器网址处回车，就会得到一张二维码，如下：很明显，需要我们补全二维码。但是这里就很坑，和常规不一样，因为还要补定时码，而且定位码还要补在外面。。。由于没有注意二维码规格，导致补了很久都没有成功，最后终于成功了。。。如下：扫描即可得到flag：hgame{Qu1ck_ReSp0nse_cODe}。打字机解压压缩包，发现里面有flag.png和一张打字机图片，如下：开始看得我一脸懵逼，不懂为什么flag.png里面会出现打字机没有的字符，后来才知道居然是大小写的区别。看了一阵实在没办法，只得上谷歌搜图了，结果真搜出了好东西，有一篇文章专门讲了这个打字机：https://new.qq.com/omn/20180111/20180111G0TE4H.html ,没想到这居然是《紫罗兰永恒花园》里面的东西，只怪我没看几集。于是对照此文章，得到flag：hgame{My_vi0let_tyPewRiter}无字天书这道题给的是一个流量包，wireshark看了一下，发现get了压缩包，一张图片，一个网页，那么就都导出一下，得到压缩包。解压压缩包，发现里面有password.txt和一张被加密的jpg图片，根据password.txt内容，我还以为密码需要从提取出的网页或者是图片来得到呢，毕竟它们的名字太具有欺骗性了，但是试了很久，无果。。。于是只能试一下暴力破解，只用数字居然很快就破解了出来，密码是：hgame25839421，终于得到了图片，如下：现在我们优先使用binwalk分析，果然隐藏着文件，是一个docx文档，打开但是发现什么都没有，估计是隐藏了，于是按下ctrl+a，ctrl+d，取消隐藏后看到了被隐藏起来的flag：hgame{59d28413e36019861498e823f3f41406}。Webvery easy web从题目可以看出需要对id进行两次url编码，然后通过get请求传过去即可。谁吃了我的flag这道题开始没有hint的时候没有头绪，因为真的没有一点信息暗示是vim编辑的，当然可以一个个地试出来到底备份文件是哪个，这个时候可以借助一些扫描工具。我们知道Vim编辑器备份文件格式.filename.swp，所以直接在所给url后面加上.index.html.swp即可。这里给出此文件（由于无法上传.index.html.swp文件，故将其改为了html）未完待续~]]></content>
      <categories>
        <category>CTF比赛</category>
        <category>2019HGAME</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>网络安全</tag>
        <tag>HGAME</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F16%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post$ hexo new "My New Post"More info: WritingRun server$ hexo serverMore info: ServerGenerate static files$ hexo generateMore info: GeneratingDeploy to remote sites$ hexo deployMore info: Deployment这是一段测试文字haha一个普通标题一个普通标题一个普通标题短文本中等文本稍微长一点的文本稍微长一点的文本短文本中等文本使用【星号】标识无序列表使用【星号】标识无序列表使用【星号】标识无序列表我是黑体字这是一行引用hello，引用结束没？AndRoid这是测试！]]></content>
  </entry>
</search>
